name: typst_book::release_with_artifact
on:
  workflow_dispatch:

env:
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
  SCCACHE_GHA_ENABLED: 'true'
  RUSTC_WRAPPER: 'sccache'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            platform: win32
            arch: x64
          - os: windows-latest
            rust-target: i686-pc-windows-msvc
            platform: win32
            arch: ia32
          - os: windows-latest
            rust-target: aarch64-pc-windows-msvc
            platform: win32
            arch: arm64

    name: build (${{ matrix.rust-target }})
    runs-on: ${{ matrix.os }}
    env:
      target: ${{ matrix.platform }}-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}
      - name: Install AArch64 target toolchain
        if: matrix.rust-target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update -y
          sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install ARM target toolchain
        if: matrix.rust-target == 'arm-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update -y
          sudo apt-get install gcc-arm-linux-gnueabihf
      - name: Run Native Build
        shell: pwsh
        run: |
          cargo build --profile release-stripped --manifest-path cli/Cargo.toml --target ${{ matrix.rust-target }} --bin typst-book
      - uses: actions/upload-artifact@v3
        with:
          name: typst-book-${{ env.target }}
          path: target/${{ matrix.rust-target }}/release-stripped/typst-book*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: success() && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: find artifacts
      - run: |
          set -ex
          mkdir -p gh-release/
          pack_release() {
            target=$2
            src=typst-book-$1
            name=typst-book-$target
            mkdir -p tmp/$name
            rm -f artifacts/$src/*.d
            rm -f artifacts/$src/*.pdb

            mkdir -p release-stripped/$name/bin
            cp artifacts/$src/typst-book* "release-stripped/$name/bin/"
            cp -r CHANGELOG release-stripped/$name/
            cp -r github-pages/docs release-stripped/$name/
            cp README.md \
              LICENSE \
              CHANGELOG.md \
              release-stripped/$name/
            chmod +x release-stripped/$name/bin/typst-book*
            zip gh-release/$name.tar.gz release-stripped/$name
          }
          pack_release win32-x64     x86_64-pc-windows-msvc
          pack_release win32-ia32    i686-pc-windows-msvc
          pack_release win32-arm64   aarch64-pc-windows-msvc

          # typst-book-font-assets
          mkdir -p release/font-assets
          cp -r artifacts/typst-book-font-assets/* release/font-assets/
          zip gh-release/font-assets.zip release/font-assets
      - name: Display structure of releasing files
        run: find gh-release
      - uses: actions/upload-artifact@v3
        with:
          name: gh-release
          path: gh-release
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'gh-release/*'
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
